[{"/Users/kkim/Development/space-apps/mars-weather/src/App.tsx":"1","/Users/kkim/Development/space-apps/mars-weather/src/index.tsx":"2","/Users/kkim/Development/space-apps/mars-weather/src/reportWebVitals.ts":"3","/Users/kkim/Development/space-apps/mars-weather/src/utils/interfaces.ts":"4","/Users/kkim/Development/space-apps/mars-weather/src/utils/useMarsAPIHook.ts":"5","/Users/kkim/Development/space-apps/mars-weather/src/components/WeatherCard.tsx":"6"},{"size":456,"mtime":1613191160112,"results":"7","hashOfConfig":"8"},{"size":500,"mtime":1611927835125,"results":"9","hashOfConfig":"8"},{"size":425,"mtime":1611927835125,"results":"10","hashOfConfig":"8"},{"size":305,"mtime":1613190121764,"results":"11","hashOfConfig":"8"},{"size":1031,"mtime":1613191311905,"results":"12","hashOfConfig":"8"},{"size":283,"mtime":1613191327714,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1vigr4n",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kkim/Development/space-apps/mars-weather/src/App.tsx",["30","31"],"import React from 'react';\nimport useMarsAPI from './utils/useMarsAPIHook';\nimport {WeatherCard }from './components/WeatherCard';\nimport {MarsData} from './utils/interfaces'\nimport './App.css';\n\nconst App: React.FC = () => {\n\n  const [MarsData] = useMarsAPI();\n\n  return (\n    <div className=\"App\">\n      { \n        MarsData && MarsData.map((iterator:any) => <WeatherCard key={iterator.sol} ></WeatherCard>) \n      }\n    </div>\n  );\n}\n\nexport default App;\n",[],"/Users/kkim/Development/space-apps/mars-weather/src/index.tsx",[],"/Users/kkim/Development/space-apps/mars-weather/src/reportWebVitals.ts",["32"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/kkim/Development/space-apps/mars-weather/src/utils/interfaces.ts",["33"],"/Users/kkim/Development/space-apps/mars-weather/src/utils/useMarsAPIHook.ts",["34","35"],"\nimport { MarsDataList} from './interfaces';\nimport {useState, useEffect} from 'react';\n\n\n//Custom Hooks, and API Parser Helper File\nconst parseData = (request:any): MarsDataList => {\n    const parsedData : MarsDataList = request.sol_keys.map((sol_key: number) => {\n        return { [sol_key]: {\n            ...request[sol_key],\n            sol: sol_key\n        }\n    }\n    });\n    return parsedData;\n}\n\nconst getMarsData = async (): Promise <MarsDataList>=> {\n    const marsApiResponse: Response = await fetch('https://api.nasa.gov/insight_weather/?api_key=DEMO_KEY=json&ver=1.0');\n    const response = await marsApiResponse.json();\n    console.log(response);\n    const parsedData:MarsDataList = parseData(response);\n    console.log(parsedData);\n    return parsedData;\n}\n\nexport default function useMarsAPI(): Array<any> {\n    const [marsData, setMarsData] = useState<MarsDataList | null> (null);\n    useEffect(() => {\n        getMarsData().then((res:MarsDataList) => setMarsData(res));\n      }, []);\n\n      return [marsData];\n}\n\n","/Users/kkim/Development/space-apps/mars-weather/src/components/WeatherCard.tsx",["36"],{"ruleId":"37","severity":1,"message":"38","line":4,"column":9,"nodeType":"39","messageId":"40","endLine":4,"endColumn":17},{"ruleId":"41","severity":1,"message":"42","line":14,"column":44,"nodeType":"43","messageId":"44","endLine":14,"endColumn":47,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":3,"column":25,"nodeType":"48","messageId":"49","endLine":3,"endColumn":57},{"ruleId":"50","severity":2,"message":"51","line":12,"column":7,"nodeType":"39","messageId":"52","endLine":12,"endColumn":13},{"ruleId":"41","severity":1,"message":"42","line":7,"column":28,"nodeType":"43","messageId":"44","endLine":7,"endColumn":31,"suggestions":"53"},{"ruleId":"41","severity":1,"message":"42","line":27,"column":45,"nodeType":"43","messageId":"44","endLine":27,"endColumn":48,"suggestions":"54"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":10,"nodeType":"39","messageId":"40","endLine":1,"endColumn":18},"@typescript-eslint/no-unused-vars","'MarsData' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["55","56"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/ban-types","Don't use `Object` as a type. The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","bannedTypeMessage",["57","58"],["59","60"],{"messageId":"61","fix":"62","desc":"63"},{"messageId":"64","fix":"65","desc":"66"},{"messageId":"61","fix":"67","desc":"63"},{"messageId":"64","fix":"68","desc":"66"},{"messageId":"61","fix":"69","desc":"63"},{"messageId":"64","fix":"70","desc":"66"},"suggestUnknown",{"range":"71","text":"72"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"71","text":"73"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"74","text":"72"},{"range":"74","text":"73"},{"range":"75","text":"72"},{"range":"75","text":"73"},[351,354],"unknown","never",[160,163],[817,820]]